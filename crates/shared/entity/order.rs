//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::StateOrderEnum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "order")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id_order: i32,
    pub id_user: Option<i32>,
    pub id_delivery_man: Option<i32>,
    pub time: Option<DateTime>,
    pub delivery_address: Option<String>,
    pub order_status: Option<StateOrderEnum>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::order_details::Entity")]
    OrderDetails,
    #[sea_orm(has_many = "super::payment::Entity")]
    Payment,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::IdUser",
        to = "super::user::Column::IdUser",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::order_details::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderDetails.def()
    }
}

impl Related<super::payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payment.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
