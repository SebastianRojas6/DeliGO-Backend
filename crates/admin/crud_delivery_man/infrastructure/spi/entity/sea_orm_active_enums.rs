//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::crud_delivery_man::domain::model::RolType as DomainRolType;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "method_payment_enum")]
pub enum MethodPaymentEnum {
    #[sea_orm(string_value = "Visa")]
    Visa,
    #[sea_orm(string_value = "MasterCard")]
    MasterCard,
    #[sea_orm(string_value = "Yape")]
    Yape,
    #[sea_orm(string_value = "Plin")]
    Plin,
    #[sea_orm(string_value = "Paypal")]
    Paypal,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "rol_type")]
pub enum RolType {
    #[sea_orm(string_value = "ADMINISTRATOR")]
    Administrator,
    #[sea_orm(string_value = "DELIVERY")]
    Delivery,
    #[sea_orm(string_value = "CUSTOMER")]
    Customer,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "state_order_enum")]
pub enum StateOrderEnum {
    #[sea_orm(string_value = "Pending")]
    Pending,
    #[sea_orm(string_value = "Preparing")]
    Preparing,
    #[sea_orm(string_value = "OnTheWay")]
    OnTheWay,
    #[sea_orm(string_value = "Delivered")]
    Delivered,
    #[sea_orm(string_value = "Cancelled")]
    Cancelled,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "state_payment_enum")]
pub enum StatePaymentEnum {
    #[sea_orm(string_value = "Pending")]
    Pending,
    #[sea_orm(string_value = "Paid")]
    Paid,
    #[sea_orm(string_value = "Cancelled")]
    Cancelled,
}

pub fn map_roltype_from_entity(rol: Option<RolType>) -> DomainRolType {
    match rol {
        Some(RolType::Administrator) => DomainRolType::Administrator,
        Some(RolType::Delivery) => DomainRolType::Delivery,
        Some(RolType::Customer) => DomainRolType::Customer,
        None => DomainRolType::Customer,
    }
}

pub fn roltype_from_i32(value: i32) -> Option<RolType> {
    match value {
        1 => Some(RolType::Administrator),
        2 => Some(RolType::Delivery),
        3 => Some(RolType::Customer),
        _ => None, // para valores desconocidos
    }
}
